import { PlatformRootStore } from '../RootStore/PlatformLoginRootStore';
import { OAuthCredential } from 'firebase/auth';
import { User } from 'realm-web';
import { IRealmContext, IUserProfileType, TokenVerifyMsg } from '@lidvizion/commonlib';
import { VerificationType } from '../Login/PhoneVerification';
export declare class PlatformLoginViewStore {
    root: PlatformRootStore;
    isLoading: boolean;
    emailHelperTxt: string;
    isEmailError: boolean;
    emailOrPhone: string;
    isLoggingIn: boolean;
    currentlyVerifying: boolean;
    placeholder: string;
    realmContext: IRealmContext;
    signInMsg: string;
    isResettingPw: boolean;
    verifyNumRef1: HTMLInputElement | null;
    verifyNumRef2: HTMLInputElement | null;
    verifyNumRef3: HTMLInputElement | null;
    verifyNumRef4: HTMLInputElement | null;
    verifyNumRef5: HTMLInputElement | null;
    verifyNumRef6: HTMLInputElement | null;
    verifyNum1: string | null;
    verifyNum2: string | null;
    verifyNum3: string | null;
    verifyNum4: string | null;
    verifyNum5: string | null;
    verifyNum6: string | null;
    verificationFor: VerificationType;
    showResetPwModal: boolean;
    password: string | null;
    passwordConfirm: string;
    loginTabValue: number;
    showPhoneVerifyModal: boolean;
    isEmail: boolean;
    isVerificationCodeValid: boolean;
    isOptInChecked: boolean;
    truncatedNum: string;
    waitingForLinkTimeout: boolean;
    resendTimer: number;
    phoneAllowed: boolean;
    emailAllowed: boolean;
    userType: IUserProfileType;
    showVerifyTokenModal: boolean;
    tokenVerifyMsg: TokenVerifyMsg;
    handleCreateUser?: (user: Realm.User, db: Realm.Services.MongoDBDatabase) => void | null;
    constructor({ root, realmContext, }: {
        root: PlatformRootStore;
        realmContext: IRealmContext;
    });
    setUserType: (userType: IUserProfileType) => void;
    setEmailAllowed: (emailAllowed: boolean) => void;
    setPhoneAllowed: (phoneAllowed: boolean) => void;
    get loginHeaderTxt(): "Login to track progress" | "Login to your account";
    get isValidPhone(): boolean;
    get isValidEmail(): boolean;
    get phoneOrEmailDivTxt(): "" | "phone or email" | "email" | "phone";
    get isSendBtnDisabled(): boolean;
    setResendTimer: (t: number) => void;
    setWaitingForLinkTimeout: (bool: boolean) => Promise<void>;
    setIsLoading: (bool: boolean) => void;
    setSignInMsg: (msg: string) => void;
    setTruncatedNum: (str: string) => void;
    setIsLoggingIn: (bool: boolean) => void;
    setEmailOrPhone: (emailOrPhone: string) => void;
    setIsResettingPw: (bool: boolean) => void;
    setIsVerificationCodeValid: (bool: boolean) => void;
    setVerifyNumRef: (ref: HTMLInputElement, position: number) => void;
    setIsOptInChecked: (bool: boolean) => void;
    setCurrentVerifyNum: (num: string, position: number) => void;
    changeLoginTab: (event: React.SyntheticEvent, newValue: number) => void;
    setLoginTabValue: (val: number) => void;
    setShowPhoneVerifyModal: (bool: boolean) => void;
    setVerificationFor: (vType: VerificationType) => void;
    setEmailHelperTxt: (txt: string) => void;
    setIsEmailError: (bool: boolean) => void;
    setShowResetPwModal: (bool: boolean) => void;
    resetCodeInput: () => void;
    handleMicrosoftsignIn: (err: any, data: any, microsoftSignIn: (data: any) => any) => Promise<any>;
    handleGoogleSignUp: (idToken: string, googleSignUp: (str: string) => any) => Promise<any>;
    handleMicrosoft: ({ microsoftSignIn, handleAfterLogin, userType, }: {
        microsoftSignIn: (cred: OAuthCredential) => any;
        handleAfterLogin?: any;
        userType: IUserProfileType;
    }) => Promise<void>;
    handleMagicLink: (email: string, db: Realm.Services.MongoDBDatabase, callbackUrl: string) => Promise<void>;
    handleMagicLinkVerification: ({ email, token, handleAfterLogin, handleAfterLoginFail, }: {
        email: string;
        token: string;
        handleAfterLogin: (currentUser: Realm.User<Realm.DefaultFunctionsFactory, SimpleObject, Realm.DefaultUserProfileData>) => void;
        handleAfterLoginFail: (msg: TokenVerifyMsg, closeModal: boolean) => void;
    }) => Promise<void>;
    get sendBtnTxt(): string;
    handleMagicClick: ({ callbackUrl, handleAfterLoginFail, }: {
        callbackUrl?: string | undefined;
        handleAfterLoginFail: (msg: TokenVerifyMsg, closeModal: boolean) => void;
    }) => Promise<void>;
    handleTokenVerifyFail: (msg: TokenVerifyMsg, handleAfterLoginFail: (msg: TokenVerifyMsg, showModal: boolean) => void) => Promise<void>;
    handlePhoneCode: () => void;
}
