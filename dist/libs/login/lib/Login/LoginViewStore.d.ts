import { AppRoute } from '@lidvizion/commonlib';
import { CredentialResponse } from '@react-oauth/google';
import { RootStore } from '../RootStore/LoginRootStore';
import { VerificationType } from './PhoneVerification';
export interface Quote {
    quote: string;
    author?: string;
}
export declare const MandatoryLoginPages: {
    account: string;
    award: string;
    settings: string;
};
export declare class LoginViewStore {
    root: RootStore;
    isLoggingIn: boolean;
    email: string | null;
    password: string | null;
    passwordConfirm: string;
    showSignIn: boolean;
    loginTabValue: number;
    isEmailError: boolean;
    isPasswordError: boolean;
    pwHelperText: string;
    showLoginModal: boolean;
    canCloseLogin: boolean;
    showFeedbackHeader: boolean;
    showSuccessSnackbar: boolean;
    showAccountHeader: boolean;
    showPointsHeader: boolean;
    showForgotPasswordModal: boolean;
    isTermsChecked: boolean;
    emailHelperTxt: string;
    isTermsError: boolean;
    showTermsModal: boolean;
    showPolicyModal: boolean;
    afterLoginNav: string | null;
    isOptInChecked: boolean;
    showPhoneVerifyModal: boolean;
    verifyNum1: string | null;
    verifyNum2: string | null;
    verifyNum3: string | null;
    verifyNum4: string | null;
    verifyNum5: string | null;
    verifyNum6: string | null;
    truncatedNum: string;
    isEmail: boolean;
    currentLoginTitle: string;
    msg: string;
    showLoginTitle: boolean;
    isVerificationCodeValid: boolean;
    isFeedbackPending: boolean;
    verifyNumRef1: HTMLInputElement | null;
    verifyNumRef2: HTMLInputElement | null;
    verifyNumRef3: HTMLInputElement | null;
    verifyNumRef4: HTMLInputElement | null;
    verifyNumRef5: HTMLInputElement | null;
    verifyNumRef6: HTMLInputElement | null;
    verificationFor: VerificationType;
    isResettingPw: boolean;
    doesUserExist: boolean;
    showResetPwModal: boolean;
    constructor(root: RootStore);
    setDoesUserExist: (bool: boolean) => void;
    setIsEmail: (bool: boolean) => void;
    setShowResetPwModal: (bool: boolean) => void;
    setShowSuccessSnackbar: (bool: boolean) => void;
    setMsg: (str: string) => void;
    setIsVerificationCodeValid: (bool: boolean) => void;
    setVerifyNumRef: (ref: HTMLInputElement, position: number) => void;
    setCurrentVerifyNum: (num: string, position: number) => void;
    setCurrentLoginTitle: (str: string) => void;
    setShowLoginTitle: (bool: boolean) => void;
    setShowPhoneVerifyModal: (bool: boolean) => void;
    setTruncatedNum: (str: string) => void;
    setIsOptInChecked: (bool: boolean) => void;
    setAfterLoginNav: (nav: AppRoute) => void;
    setCanCloseLogin: (bool: boolean) => void;
    setEmailHelperTxt: (txt: string) => void;
    setLoginTabValue: (val: number) => void;
    setIsTermsChecked: (bool: boolean) => void;
    setIsTermsError: (bool: boolean) => void;
    setIsResettingPw: (bool: boolean) => void;
    setShowLoginModal: (bool: boolean) => void;
    setShowForgotPasswordModal: (bool: boolean) => void;
    resetCodeInput: () => void;
    setShowFeedbackHeader: (bool: boolean) => void;
    setShowAccountHeader: (bool: boolean) => void;
    setShowPointsHeader: (bool: boolean) => void;
    setShowPolicyModal: (bool: boolean) => void;
    setShowTermsModal: (bool: boolean) => void;
    setEmail: (email: string) => void;
    setPassword: (pass: string) => void;
    setPasswordConfirm: (pass: string) => void;
    setShowSignIn: (show: boolean) => void;
    setVerificationFor: (vType: VerificationType) => void;
    changeLoginTab: (event: React.SyntheticEvent, newValue: number) => void;
    setIsEmailError: (bool: boolean) => void;
    setIsPasswordError: (bool: boolean) => void;
    setpwHelperText: (txt: string) => void;
    setIsLoggingIn: (bool: boolean) => void;
    setIsFeedbackPending: (bool: boolean) => void;
    handleFormValidation: (email: string, pw: string) => {
        isValid: boolean;
        isEmail: boolean;
    };
    handleGoogleSignUp: (res: CredentialResponse, googleSignUp: (str: string) => any) => Promise<any>;
}
