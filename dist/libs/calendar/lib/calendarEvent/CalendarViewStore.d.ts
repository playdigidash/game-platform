import { CalendarEventModel, CalendarEventStatus, CalendarSearchOptionModel } from '@lidvizion/commonlib';
import { CalendarTabValue } from '@lidvizion/commonlib';
import { RootStore } from '../RootStore/RootStore';
import dayjs from 'dayjs';
export declare class CalendarViewStore {
    root: RootStore;
    showEventModal: boolean;
    showCalendarModal: boolean;
    currentEventIdx: number;
    currentEvent: CalendarEventModel | null;
    showColorPickerModal: boolean;
    calendarId: string | null;
    eventArr: CalendarEventModel[];
    autocompleteRef: any;
    calTabValue: CalendarTabValue;
    shouldRenderDays: boolean;
    showEventDetailModal: boolean;
    searchOptions: CalendarSearchOptionModel[];
    searchOptionValue: string;
    showDetailTextFieldModal: boolean;
    isNewEvt: boolean;
    calendarModalTranslatables: string[];
    calendarEventLookup: {};
    calendarEventDetailTranslatables: string[];
    constructor(root: RootStore);
    setCalendarModalTranslatables: (translated: string[]) => void;
    setCalendarEventDetailTranslatables: (translated: string[]) => void;
    setCalendarEventLookup: (lookup: {
        [key: string]: string;
    }) => void;
    setIsNewEvt: (bool: boolean) => void;
    setShowCalendarModal: (bool: boolean) => void;
    setShowEventDetailModal: (bool: boolean) => void;
    setShowEventModal: (bool: boolean) => void;
    setCurrentEvent: (evt: CalendarEventModel) => void;
    setShowColorPickerModal: (bool: boolean) => void;
    setCalendarId: (str: string) => void;
    setEventArr: (arr: CalendarEventModel[]) => void;
    addEventToArr: (evt: CalendarEventModel) => void;
    setShowDetailTextFieldModal: (bool: boolean) => void;
    setEvtDetail: (detail: string) => void;
    setEventStatus: (status: CalendarEventStatus, id: string) => void;
    setCurrentEventIdx: (num: number) => void;
    setCalTabValue: (val: CalendarTabValue) => void;
    setshouldRenderDays: (bool: boolean) => void;
    setSearchOptions: (arr: CalendarSearchOptionModel[]) => void;
    onSearchOptChg: (str: string, db: Realm.Services.MongoDBDatabase) => Promise<void>;
    getCommunityEvents: (db: Realm.Services.MongoDBDatabase, calendarId: string) => Promise<void>;
    handleCalTabChange: (val: number, db: Realm.Services.MongoDBDatabase, calendarId: string) => Promise<void>;
    removeEvt: (evtId: string) => void;
    changeCalTabValue: (event: React.SyntheticEvent, newValue: CalendarTabValue) => void;
    handleSearchSubmit: () => void;
    setAutocompleteRef: (ref: any) => void;
    getPersonalCalDays: () => void;
    applyCurrFilter: (day: dayjs.Dayjs) => CalendarEventModel[];
}
